// Code generated by go-bindata.
// sources:
// dist/index.html
// dist/main.css
// dist/main.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4e\x33\x31\x10\x84\x5f\x65\xff\xad\x7e\x24\x84\x49\x8b\xd6\xdb\x04\x6a\x28\xa0\xa0\x74\x7c\x1b\xd9\x89\xcf\x3e\xd9\x7b\x07\x79\x7b\x74\xe7\x48\x44\x34\x96\x3d\x5e\xcd\xcc\xb7\xf4\xef\xf9\x75\xff\xfe\xf9\xf6\x02\x41\xc7\xc4\x74\x3d\xc5\x0d\x4c\x1a\x35\x09\x7f\x4c\x64\xfa\x8d\x52\xcc\x67\xa8\x92\x2c\x36\xbd\x24\x69\x41\x44\x11\xf4\x32\x89\x45\x95\x6f\x35\xbe\x35\x84\x50\xe5\x68\x71\x74\x31\x3f\xac\x6f\x26\xd3\xed\x0e\x65\xb8\x30\xad\x3a\x53\xd8\xf1\x3e\x88\x3f\xdf\x43\x6c\xd0\xa4\x2e\x52\x61\x9e\xa0\x54\x18\xca\x57\x26\x13\x76\x4c\xc7\x52\x47\x88\x83\x45\xbf\x4e\x22\x38\xaf\xb1\x64\x8b\x27\xb7\xb8\xe6\x6b\x9c\xf4\x69\x29\x71\xf8\xff\x78\x87\x4c\x31\x4f\xb3\xde\x54\x41\xc8\x6e\x14\x8b\x73\x4d\x7f\x7e\xdb\x7c\x18\xa3\x22\x2c\x2e\xcd\x62\x71\xab\xb1\x96\x5c\xe3\x98\xba\xf1\x2d\xd3\x6f\x1c\x42\xab\xfe\x4a\x76\xda\xc0\xba\xce\x64\x3a\x95\xe9\x88\x66\x5b\xe2\x4f\x00\x00\x00\xff\xff\x5d\x77\x29\xa1\x5a\x01\x00\x00")

func distIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_distIndexHtml,
		"dist/index.html",
	)
}

func distIndexHtml() (*asset, error) {
	bytes, err := distIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/index.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1520174712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _distMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x4d\xaa\xc3\x30\x0c\x06\xf7\x3e\x85\x20\xdb\x97\x87\xd7\xee\x69\x1c\xff\x55\xad\x2c\x05\x47\x81\x9a\x92\xbb\x17\xbb\x8b\xae\x84\xbe\x19\x98\xbb\x56\xfa\x33\x9b\xc4\x0e\x6f\x03\x50\x7d\x2b\xc8\x0e\xec\xcd\x00\xec\x3e\x46\xe4\x32\xbf\xcb\x54\x8f\x3c\x9d\x88\xc7\x4e\xbe\x3b\xc8\x94\x5e\xc3\x1b\x77\x8d\xd8\x52\x50\x61\x07\x41\xe8\xac\x3c\xc0\xe3\x3c\x14\x73\x5f\x83\xb0\x26\x56\x07\x21\xb1\xa6\x36\x90\x27\x2c\xbc\xa2\xa6\x7a\xfc\xe6\xcb\xfc\xeb\x4c\x6c\x3e\x3c\x4b\x93\x93\xa3\x83\x25\xdb\xd9\x5f\xbe\xf5\x20\x24\xcd\xc1\x62\x6d\x1e\xeb\x27\x00\x00\xff\xff\xc2\x14\xe5\x4f\xc0\x00\x00\x00")

func distMainCssBytes() ([]byte, error) {
	return bindataRead(
		_distMainCss,
		"dist/main.css",
	)
}

func distMainCss() (*asset, error) {
	bytes, err := distMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/main.css", size: 192, mode: os.FileMode(420), modTime: time.Unix(1520174712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _distMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x52\xcb\x6e\xdb\x3a\x10\xdd\xfb\x2b\x0e\x22\x20\x96\x71\x05\x3b\xb8\xe8\xce\xd0\x22\x6d\xd5\xc4\x80\xe3\x1a\xb6\x17\xd9\x15\xb4\x38\x8e\x85\xd0\x94\x4a\x0d\xd3\x18\x85\xfe\xbd\x20\x45\x3d\x52\x74\x23\xf1\x31\xe7\xc1\x39\x13\x9f\xac\xce\xb9\x28\x75\x3c\xc3\xef\x09\xf0\x26\x0c\xee\xb7\xab\x1f\xdb\x5d\xf6\x6d\xf5\x9c\xe0\x78\x5d\xc9\x04\xa7\xd2\x5c\x12\x9c\x99\xab\x07\xe2\x04\x85\xae\x2c\x2f\x27\xc0\x62\x11\x45\x51\x84\x2f\xdf\x37\xfb\xc3\x1e\x6e\x1d\x4d\x30\xc2\x23\xc5\xcd\x42\x54\xc5\xe2\x66\x54\xfd\x98\xad\xb7\xd9\x6e\x28\x77\x12\x48\xd1\x1b\x29\x64\x6b\x05\x30\xc4\xd6\x68\xc8\x32\xb7\x17\xd2\x3c\x7f\x21\xce\x14\xb9\xe5\xe7\xeb\x4a\xba\x42\x47\xdb\xb8\x4f\xf0\x36\xe6\xb1\x46\x25\xc8\x85\x52\x47\x91\xbf\x76\x94\xee\x7d\xef\x17\xf5\xc8\x5c\x2d\xfd\x41\xd8\x20\x85\xa6\x5f\x78\x7e\x5a\xbb\xdd\x8e\x7e\x5a\xaa\xf9\x43\xc5\xbc\xd4\x86\x84\xbc\xd6\x2c\x98\xf2\xb3\xd0\x2f\x34\x56\xeb\x04\x80\xe2\x84\xb8\xc3\x78\xc4\xde\x21\x90\xa6\x29\x3e\xe1\xf6\xb6\xe7\x73\x44\xb6\xf6\xe7\xff\xdf\xdd\x0d\x78\xf4\xa6\x47\x34\x75\x55\xea\x9a\x0e\xf4\xce\xb3\x65\xa8\x6b\xfc\xbf\xf9\xcb\x64\x45\x3a\x9e\x3e\x64\x87\x69\x02\xdf\x00\x36\x96\x02\x24\xb4\xb3\xd7\x27\x2d\x63\x6d\x95\x1a\xba\x18\x12\xca\xd6\xd9\x53\xb6\x19\x25\xea\xf2\x47\xea\x93\x8a\xa7\xf9\x99\xf2\xd7\xa9\x07\xf9\x41\xe8\x2f\x74\x7b\xd8\xc5\x7c\xbf\xf9\xba\x1e\xe7\x1c\xe4\x1d\xd7\xbc\xd4\xb5\x3d\x5e\x0a\xfe\x57\x07\x5d\x44\x42\x4a\xd3\x9a\x16\x8a\x0c\xc7\x5e\x28\x3c\xc3\xdd\x21\x1d\x4f\xd9\x7f\xad\x91\xf9\x9b\x50\x96\x3e\xbc\x35\x8c\x45\xec\x30\xc9\x20\x25\x05\x8b\xa1\xe1\xa1\xb6\x55\xf2\x57\x2d\x47\xd3\x35\xa6\x99\xc5\xb3\xe5\xe4\x4f\x00\x00\x00\xff\xff\xd7\x6d\xa1\xc4\x2b\x03\x00\x00")

func distMainJsBytes() ([]byte, error) {
	return bindataRead(
		_distMainJs,
		"dist/main.js",
	)
}

func distMainJs() (*asset, error) {
	bytes, err := distMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/main.js", size: 811, mode: os.FileMode(420), modTime: time.Unix(1520174712, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/index.html": distIndexHtml,
	"dist/main.css": distMainCss,
	"dist/main.js": distMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{distIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{distMainCss, map[string]*bintree{}},
		"main.js": &bintree{distMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
