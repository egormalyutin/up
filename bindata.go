// Code generated by go-bindata.
// sources:
// dist/index.html
// dist/main.css
// dist/main.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4e\x33\x31\x10\x84\x5f\x65\xff\xad\x7e\x24\x84\x49\x8b\xd6\xdb\x04\x6a\x28\xa0\xa0\x74\x7c\x1b\xd9\x89\xcf\x3e\xd9\x7b\x07\x79\x7b\x74\xe7\x48\x44\x34\x96\x3d\x5e\xcd\xcc\xb7\xf4\xef\xf9\x75\xff\xfe\xf9\xf6\x02\x41\xc7\xc4\x74\x3d\xc5\x0d\x4c\x1a\x35\x09\x7f\x4c\x64\xfa\x8d\x52\xcc\x67\xa8\x92\x2c\x36\xbd\x24\x69\x41\x44\x11\xf4\x32\x89\x45\x95\x6f\x35\xbe\x35\x84\x50\xe5\x68\x71\x74\x31\x3f\xac\x6f\x26\xd3\xed\x0e\x65\xb8\x30\xad\x3a\x53\xd8\xf1\x3e\x88\x3f\xdf\x43\x6c\xd0\xa4\x2e\x52\x61\x9e\xa0\x54\x18\xca\x57\x26\x13\x76\x4c\xc7\x52\x47\x88\x83\x45\xbf\x4e\x22\x38\xaf\xb1\x64\x8b\x27\xb7\xb8\xe6\x6b\x9c\xf4\x69\x29\x71\xf8\xff\x78\x87\x4c\x31\x4f\xb3\xde\x54\x41\xc8\x6e\x14\x8b\x73\x4d\x7f\x7e\xdb\x7c\x18\xa3\x22\x2c\x2e\xcd\x62\x71\xab\xb1\x96\x5c\xe3\x98\xba\xf1\x2d\xd3\x6f\x1c\x42\xab\xfe\x4a\x76\xda\xc0\xba\xce\x64\x3a\x95\xe9\x88\x66\x5b\xe2\x4f\x00\x00\x00\xff\xff\x5d\x77\x29\xa1\x5a\x01\x00\x00")

func distIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_distIndexHtml,
		"dist/index.html",
	)
}

func distIndexHtml() (*asset, error) {
	bytes, err := distIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/index.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1520261117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _distMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x31\xae\xc3\x30\x08\x00\xd0\xc3\x64\xfd\xf9\xf2\x8c\x4f\xe3\x18\xe2\xd2\x62\x88\x08\x91\x1a\x59\xbe\x7b\x55\xa9\xcb\x1b\xde\x66\x78\xff\x3d\xa2\xcb\xe8\xc5\x1b\x2b\xa4\x7c\x14\x44\xd6\x06\x69\xf6\xc2\x3a\x90\xcf\x43\xca\x0d\xbb\xd0\x3b\x7f\x59\x91\x9d\x6a\x98\x42\x35\xb9\xba\xe6\xe7\x75\x06\xef\xf7\x5a\x4d\x83\x34\xa0\x92\x06\x79\x2e\xc2\x4d\x57\x0e\xea\xe7\xaf\xe6\x7f\x8c\xad\xd4\x57\x73\xbb\x14\xc1\x09\xe7\xa2\xa3\x9a\x98\xc3\x92\xd2\x3e\x3f\x01\x00\x00\xff\xff\x28\x22\x52\x97\x8e\x00\x00\x00")

func distMainCssBytes() ([]byte, error) {
	return bindataRead(
		_distMainCss,
		"dist/main.css",
	)
}

func distMainCss() (*asset, error) {
	bytes, err := distMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/main.css", size: 142, mode: os.FileMode(420), modTime: time.Unix(1520261117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _distMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\x03\x31\x10\x85\xff\x4a\x9b\xc3\x92\xc1\x90\x16\xf1\x56\xf6\xa2\x14\x2d\xe8\xa5\x56\xf0\x1a\x93\x67\x5b\xdc\x4e\xd6\x64\x52\x2d\x65\xff\xbb\xa4\x15\xe9\xc1\xdb\xf0\xde\x9b\x37\x1f\x33\x7e\x2f\xec\x65\x1b\x59\xd3\x71\xef\xd2\x88\x0d\x66\x6a\xe2\xfa\xed\x44\x19\xb4\x7f\x26\x1b\x9c\x7d\x99\x25\x48\x49\xac\xa5\x65\x7c\x8d\x5e\x9f\x1e\x1f\x44\xfa\x25\x3e\x0b\xb2\x90\x8d\x9c\xe0\xc2\x21\x8b\x13\xf8\x8d\xe3\xf5\x45\x07\x1d\x6f\xda\xb6\x15\x7b\x4a\x3c\xd7\x44\xd3\x5c\x4f\xa7\x27\xad\x2e\x94\xdc\x34\xd0\xd5\xcf\x7d\xe4\x8c\x15\xbe\x85\x06\x23\x36\xf6\x60\xad\xee\xe7\x2b\x65\xd8\x8c\xa7\x64\xc4\x66\x70\xd0\x5c\xba\x8e\x06\xa3\xf9\x82\x93\x8e\x67\xbe\x51\x88\xbe\xec\xc0\x62\xd7\x90\x79\x87\x3a\xde\x1e\x16\x41\x33\x0d\x5a\xf9\x0d\xfc\x87\xa2\xca\x9b\xcb\xdb\x6e\x2b\x97\x94\xe7\x82\xdf\x27\x5c\x81\x83\x8f\x01\x2f\xcb\xc5\x5d\xdc\xf5\x91\xc1\xa2\xd9\xba\x10\x12\x72\xb6\x7b\xd7\x15\x90\x81\xae\x82\xf9\x07\xc3\x75\x48\x52\x8f\xd2\x30\x68\x9a\xfd\x04\x00\x00\xff\xff\x69\x84\x1e\x43\x6f\x01\x00\x00")

func distMainJsBytes() ([]byte, error) {
	return bindataRead(
		_distMainJs,
		"dist/main.js",
	)
}

func distMainJs() (*asset, error) {
	bytes, err := distMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/main.js", size: 367, mode: os.FileMode(420), modTime: time.Unix(1520261117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/index.html": distIndexHtml,
	"dist/main.css": distMainCss,
	"dist/main.js": distMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{distIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{distMainCss, map[string]*bintree{}},
		"main.js": &bintree{distMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
