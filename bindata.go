// Code generated by go-bindata.
// sources:
// dist/index.html
// dist/main.css
// dist/main.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _distIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xb1\x4e\x33\x31\x10\x84\x5f\x65\xff\xad\x7e\x24\x84\x49\x8b\xd6\xdb\x04\x6a\x28\xa0\xa0\x74\x7c\x1b\xd9\x89\xcf\x3e\xd9\x7b\x07\x79\x7b\x74\xe7\x48\x44\x34\x96\x3d\x5e\xcd\xcc\xb7\xf4\xef\xf9\x75\xff\xfe\xf9\xf6\x02\x41\xc7\xc4\x74\x3d\xc5\x0d\x4c\x1a\x35\x09\x7f\x4c\x64\xfa\x8d\x52\xcc\x67\xa8\x92\x2c\x36\xbd\x24\x69\x41\x44\x11\xf4\x32\x89\x45\x95\x6f\x35\xbe\x35\x84\x50\xe5\x68\x71\x74\x31\x3f\xac\x6f\x26\xd3\xed\x0e\x65\xb8\x30\xad\x3a\x53\xd8\xf1\x3e\x88\x3f\xdf\x43\x6c\xd0\xa4\x2e\x52\x61\x9e\xa0\x54\x18\xca\x57\x26\x13\x76\x4c\xc7\x52\x47\x88\x83\x45\xbf\x4e\x22\x38\xaf\xb1\x64\x8b\x27\xb7\xb8\xe6\x6b\x9c\xf4\x69\x29\x71\xf8\xff\x78\x87\x4c\x31\x4f\xb3\xde\x54\x41\xc8\x6e\x14\x8b\x73\x4d\x7f\x7e\xdb\x7c\x18\xa3\x22\x2c\x2e\xcd\x62\x71\xab\xb1\x96\x5c\xe3\x98\xba\xf1\x2d\xd3\x6f\x1c\x42\xab\xfe\x4a\x76\xda\xc0\xba\xce\x64\x3a\x95\xe9\x88\x66\x5b\xe2\x4f\x00\x00\x00\xff\xff\x5d\x77\x29\xa1\x5a\x01\x00\x00")

func distIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_distIndexHtml,
		"dist/index.html",
	)
}

func distIndexHtml() (*asset, error) {
	bytes, err := distIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/index.html", size: 346, mode: os.FileMode(420), modTime: time.Unix(1520336865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _distMainCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc8\x41\x6e\xc4\x20\x0c\x00\xc0\xc7\xe4\xda\x54\x9c\xcd\x6b\x1c\xec\x50\xb7\x60\x47\xc6\x91\x1a\x21\xfe\xbe\x5a\x69\x2f\x73\x98\xc3\xe8\xf9\xfa\x89\xde\x66\x47\xaf\xa2\x90\xf2\x85\x44\xa2\x15\xd2\xea\x28\x3a\x49\xc6\xd5\xf0\x81\xb3\xf1\x7f\x7e\xb3\x93\x38\x97\x30\x85\x62\xed\xee\x9a\x7f\xef\x11\x72\x3e\x7b\x31\x0d\xd6\x80\xc2\x1a\xec\x19\x9b\x54\xdd\x25\xb8\x8f\x4f\xad\x6f\xd1\x6b\x1e\x58\xfe\xaa\xdb\xad\x04\xce\xb4\x36\x24\x72\x1e\x63\x16\x6b\xe6\xb0\xa5\x74\xae\x57\x00\x00\x00\xff\xff\x7b\xa4\xda\xcb\x96\x00\x00\x00")

func distMainCssBytes() ([]byte, error) {
	return bindataRead(
		_distMainCss,
		"dist/main.css",
	)
}

func distMainCss() (*asset, error) {
	bytes, err := distMainCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/main.css", size: 150, mode: os.FileMode(420), modTime: time.Unix(1520336865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _distMainJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x41\x4b\x03\x31\x10\x85\xff\xca\x76\x0f\x4b\x06\x43\x5a\xc4\x5b\xc9\x45\x29\x5a\xd0\x4b\xad\xe0\x35\xee\x3e\xdb\x62\x3a\x59\x93\x49\xb5\x94\xfd\xef\x92\x56\xa5\x88\xb7\x61\xde\x9b\x99\x6f\xde\xe8\x35\x73\x2b\x9b\xc0\x8a\x0e\x3b\x17\x2b\xd6\x98\xd6\x63\xd7\x6f\xc6\xb5\x86\xfd\x15\x59\xe3\xa4\xcb\x34\x42\x72\x64\x25\x96\xf1\x51\x3d\x3f\xdc\xdf\x89\xf4\x0b\xbc\x67\x24\x21\x13\x38\xc2\x75\xfb\x24\x4e\xd0\xae\x1d\xaf\xce\x76\xd0\xe1\xca\x5a\x2b\xe6\xe8\x78\x2c\x8e\xa6\xb9\x9c\x4c\x8e\xbd\x32\x90\x53\xd3\x40\x15\x3d\xf5\x81\x13\x96\xf8\x14\x1a\xb4\x98\xd0\x83\x55\x7d\x3b\x5b\xd6\x9a\xf5\x68\x42\x5a\x4c\x02\x77\x8a\xb3\xf7\x34\x68\xc5\x67\x9c\x74\x38\xf1\x55\x5d\x68\xf3\x16\x2c\x66\x05\x99\x79\x94\xf2\x7a\x3f\xef\x14\xd3\xa0\xea\x76\x8d\xf6\xad\xa6\xc2\x9b\xf2\xcb\x76\x23\xf6\x4f\x0c\x3f\x6f\x56\x62\xbf\xd3\xb8\x00\xb7\xa1\xc3\xd3\x62\x7e\x13\xb6\x7d\x60\xb0\x28\x36\x39\x7a\xb3\x73\x3e\x83\x34\x94\xe8\x7f\x38\x9c\x47\x94\x72\x95\x86\x41\xd1\xf4\x2b\x00\x00\xff\xff\xb1\xa7\x60\xff\x70\x01\x00\x00")

func distMainJsBytes() ([]byte, error) {
	return bindataRead(
		_distMainJs,
		"dist/main.js",
	)
}

func distMainJs() (*asset, error) {
	bytes, err := distMainJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "dist/main.js", size: 368, mode: os.FileMode(420), modTime: time.Unix(1520336865, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dist/index.html": distIndexHtml,
	"dist/main.css": distMainCss,
	"dist/main.js": distMainJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dist": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{distIndexHtml, map[string]*bintree{}},
		"main.css": &bintree{distMainCss, map[string]*bintree{}},
		"main.js": &bintree{distMainJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
